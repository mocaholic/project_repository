﻿/**----------------------------------------------------------------------------- * 공통유틸 관련 처리 *----------------------------------------------------------------------------*/var ComUtil = {	/**	 * Object 의 String 타입 반환.	 * string, number, boolean, date, function, object(null제외), null, undefined	 * @param obj  Object	 * @return String	 */	GetType:function(obj) {		if (obj == null) {			return "null";		}		return (typeof obj).toLowerCase();	},	/**	 * undefined 체크.	 * @param obj  object	 * @return Boolean	 */	IsUndefined:function(obj) {		return (obj == undefined);	},	/**	 * null 또는 undefined 체크.	 * @param obj  object	 * @return Boolean	 */	IsNull:function(obj) {		if ( obj==null || ComUtil.IsUndefined(obj) ) {			return true;		}		return false;	},	/**	 * null 또는 String Empty 체크.	 * @param obj  object	 * @return boolean	 */	IsNullOrEmpty:function(obj) {		if (ComUtil.IsNull(obj)) {			return true;		} else {			if (ComUtil.GetType(obj) == "string") {				if (obj.length < 1) {					return true;				}			}		}		return false;	},	/**	 * null 또는 String Empty, String Blank(공백) 체크.	 * @param obj  Object	 * @return Boolean	 */	IsNullOrBlank:function(obj) {		if (ComUtil.IsNull(obj)) {			return true;		} else {			if (ComUtil.GetType(obj) == "string") {				if (obj.trim().length < 1) {					return true;				}			}		}		return false;	},	/**	 * ComUtil.IsNull 가 true 시 default 값 설정.	 * @param obj     Object	 * @param objDef	 * @return Object	 */	Nvl:function(obj, objDef) {		return ComUtil.IsNull(obj) ? objDef : obj;	},	/**	 * ComUtil.IsNullOrEmpty 가 true 시 default 값 설정.	 * @param obj     Object	 * @param objDef  default Object	 * @return Object	 */	Nvl2:function(obj, objDef) {		return ComUtil.IsNullOrEmpty(obj) ? objDef : obj;	},	/**	 * ComUtil.IsNullOrBlank 가 true 시 default 값 설정.	 * @param obj     Object	 * @param objDef  default Object	 * @return Object	 */	Nvl3:function(obj, objDef) {		return ComUtil.IsNullOrBlank(obj) ? objDef : obj;	},	/**	 * ComUtil.IsNullOrBlank 가 true 시 default 값 설정. false일시 addWd 추가	 * @param obj     Object	 * @param objDef  default Object	 * @return Object	 */	Nvl4:function(obj, objDef ,addWd) {		return ComUtil.IsNullOrBlank(obj) ? objDef : obj+addWd;	},	/**	 * 배열 여부 체크.	 * @param obj  object	 * @return Boolean	 */	IsArray:function(obj) {		if ( !ComUtil.IsNull(obj)				&& ComUtil.GetType(obj)=="object"				&& !ComUtil.IsUndefined(obj.length)) {			return true;		} else {			return false;		}	},	/**	 * 배열에서 특정 인덱스의 Object 반환. 배열이 아니면 Object을 그대로 반환.	 * @param  obj  Object	 * @param  idx  인덱스	 * @return Object	 */	GetObject:function(obj, idx) {		if (ComUtil.IsArray(obj)) {			return obj[idx];		} else {			return obj;		}	},	/**	 * 배열에서 값에 의한 위치 반환.	 * @param arr  Object array	 * @param val  value	 * @return Number	 */	GetIndexByVal:function(arr, val) {		var idx = -1;		if (ComUtil.IsArray(arr)) {			for (var ii = 0; ii < arr.length; ++ii) {				if (arr[ii].value == val) {					idx = ii;					break;				}			}		} else if (arr == val) {			idx = 0;		}		return idx;	},	/**	 * 배열에서 객체에 의한 위치 반환.	 * @param arr  Object array	 * @param obj  Object	 * @return : number	 */	GetIndexByObj:function(arr, obj) {		var idx = -1;		if (ComUtil.IsArray(arr)) {			for (var ii = 0; ii < arr.length; ++ii) {				if (arr[ii] == obj) {					idx = ii;					break;				}			}		} else if (arr == obj) {			idx = 0;		}		return idx;	},	/**     * replace all. 대소문자 구분.     *     * @param source     *            변경대상 문자열     * @param oldStr     *            변경전문자     * @param replace     *            변경후문자     * @return     */    replaceAll : function(source, oldStr, newStr) {        var re = new RegExp(oldStr, "g");        var str = source;        if( undefined == str || 'undefined' == str ) return '';        var arg = newStr ? newStr : "";        str = str.replace(re, arg);        return str;    },    replaceAll2 : function(content,before,after){        return content.split(before).join(after);    },	/**	 * strValue에 포함된 문자를 제거.	 * ComUtil.RemoveMark("2009/06/11 13:01:00", "/ :"); 시각에서 "/ :"를 제거	 * @param strValue     Mark를 제거할 문자열	 * @param strMarkList  Mark List	 * @return String	 */	RemoveMark:function(strValue, strMarkList) {		for ( var ii=0; ii<strMarkList.length; ++ii ) {			strValue = strValue.replace(eval("/"+ strMarkList.charAt(ii) +"/g"), "");		}		return strValue;	},	/**	 * 문자열을 Byte로 Cut하여 리턴(nByte째 문자가 1Byte이상이면 그 이전 문자열까지 반환).	 * @param nByte     Cut할 문자열 길이	 * @param strMark   생략기호(예:...), 기본값 없음.	 * @param isChkEnt  엔터체크(textarea의 \r\n 패턴을 1바이트(\n생략)로 처리), 기본값 체크 안함.	 * @return String	 */	ByteString:function(str, nByte, strMark, isChkEnt) {		if (ComUtil.IsNull(str)) {			return "";		}		var onechar;		var cnt = 0;		isChkEnt = (isChkEnt==null) ? false: isChkEnt;		for (var ii=0; ii<str.length; ++ii) {			onechar = escape(str.charAt(ii));			if (onechar.length > 4) {				cnt += 2;			} else {				if (isChkEnt) {					if (onechar != '%0A') {						++cnt;					}				} else {					++cnt;				}			}			if (nByte < cnt) {				strMark = (strMark==null) ? "" : strMark;				return str.substring(0, ii) + strMark;			}		}		return str;	},	validate_xss:function(field){		var valid = "&%*+;!()<>\"\'";		var temp;		var temp_str = "";		for (var i=0 ; i<field.value.length ; i++) {			temp = "" + field.value.substring(i, i+1);			if (valid.indexOf(temp) != "-1") {					field.value = temp_str;					//ComUtil.alert("특수문자는 사용에 제한이 됩니다.", "", "", field);					alert("특수문자는 사용에 제한이 됩니다.", "", "", field);					field.select();					return false;			} else {				temp_str = temp_str + temp;			}		}		return true;	},	//주민등록번호 유효성 검증	isValidJuminNo : function(regno){		//널인지?		if(isEmpty(regno)){			return null;		}		// 13자리 숫자인가? -> 주민번호		if((getByteLength(regno) != 13) || (!isNum(regno)) ) {			//ComUtil.alert("주민등록번호는 13자리 숫자입니다.", "", "", regno);			alert("특수문자는 사용에 제한이 됩니다.", "", "", field);			return false;		}		//올바른 주민등록번호인지 검증	    var ju = regno.substring(0,6);	    var ju1 = regno.substring(6);	    juid = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0);		for(var i = 0; i<6;i++)			juid[i] = ju.substring(i,i+1);		for(i=0;i<7;i++)			juid[i+6] = ju1.substring(i,i+1);	    for(var sum = 0, i = 0;i<12;i++)			sum += juid[i] * ((i >7) ? (i-6) : (i+2));	    var mod = 11 - sum%11;		if(mod >= 10)			mod -= 10;		if(mod != juid[12]) {			 //ComUtil.alert("올바르지 않은 주민등록번호입니다.", "", "", regno);			alert("올바르지 않은 주민등록번호입니다.", "", "", regno);			 return false;		}	    else {			  return true;		}	},	//사업자번호 유효성 검증	isValidSaupNo : function(strNumb)	{		//널인지?		if(isEmpty(strNumb)){			return null;		}		// 10자리 숫자인가?		if((getByteLength(strNumb) != 10) || (!isNum(strNumb)) ) {			//ComUtil.alert("사업자등록번호는 10자리 숫자입니다.", "", "", strNumb);			alert("사업자등록번호는 10자리 숫자입니다.", "", "", strNumb);			return false;		}		sumMod	=	0;		sumMod	+=	Number(strNumb.substring(0,1));		sumMod	+=	Number(strNumb.substring(1,2)) * 3 % 10;		sumMod	+=	Number(strNumb.substring(2,3)) * 7 % 10;		sumMod	+=	Number(strNumb.substring(3,4)) * 1 % 10;		sumMod	+=	Number(strNumb.substring(4,5)) * 3 % 10;		sumMod	+=	Number(strNumb.substring(5,6)) * 7 % 10;		sumMod	+=	Number(strNumb.substring(6,7)) * 1 % 10;		sumMod	+=	Number(strNumb.substring(7,8)) * 3 % 10;		sumMod	+=	Math.floor(Number(strNumb.substring(8,9)) * 5 / 10);		sumMod	+=	Number(strNumb.substring(8,9)) * 5 % 10;		sumMod	+=	Number(strNumb.substring(9,10));		if	(sumMod % 10	!=	0)		{			//ComUtil.alert("올바르지 않은 사업자등록번호입니다.", "", "", strNumb);			alert("올바르지 않은 사업자등록번호입니다.", "", "", strNumb);			return false;		}		return	true;	},	/* 계좌번호 포맷지정	 * obj  : frm.ACCTNO	 * ex) onblur='acctFormatBlur(frm.RCPMNY_BANK.value, frm.ACCTNO)'	 */	acctFormatBlur : function(bankcd, obj)	{	    // 입금은행이 금호종금이 아니면 리턴.	    if (bankcd != '000' ) return;	    var acctno =	obj.value;	    if (acctno == "")     return;	    if( 0 < acctno.indexOf("-"))	      acctno = ReplaceStr(acctno, "-","");	    if(acctno.length != 9) return;	    var acct1 = acctno.substring(0,1);	    var acct2 = acctno.substring(1,3);	    var acct3 = acctno.substring(3,8);	    var acct4 = acctno.substring(8,9);	    obj.value = acct1+"-"+acct2+"-"+acct3+"-"+acct4;	},	// 영숫자외 몇개키만 입력가능(onkeydown)	hasOnlyAlphaNumDN : function() {		var code = event.keyCode ? event.keyCode :		        event.which ? event.which : event.charCode;	//alert("code = " + code);		if (code!=13) {			event.returnValue =				( code >= 48 && code <= 57)        // Number			    || ( code >= 65 && code <=90)        // alpha				|| code == 8                              // Backspace				|| code == 9                              // Tab				|| code == 46                            // Delete				|| ( code >= 37 && code <= 40)   // Cursor Key				|| ( code >= 96 && code <= 105) // Key Pad		}	},	// 영숫자외 몇개키만 입력가능(onkeydown)	hasOnlyAlphaNumDN_chw : function() {		var code = event.keyCode ? event.keyCode :		        event.which ? event.which : event.charCode;		if (code!=13) {			event.returnValue =				( code >= 48 && code <= 57)        // Number			    || ( code >= 65 && code <=90)        // alpha				|| code == 8                              // Backspace				|| code == 9                              // Tab				|| code == 46                            // Delete				|| ( code >= 37 && code <= 40)   // Cursor Key				|| ( code >= 96 && code <= 105) // Key Pad				|| code == 109				|| code == 189	// dash		}	},	hasOnlyAlphaBet : function() {		var code = event.keyCode ? event.keyCode :		        event.which ? event.which : event.charCode;	//alert("code = " + code);		if (code!=13) {			event.returnValue =			    ( code >= 65 && code <=90)        // alpha				|| code == 8                              // Backspace				|| code == 9                              // Tab				|| code == 46                            // Delete				|| ( code >= 37 && code <= 40)   // Cursor Key				|| ( code >= 96 && code <= 105) // Key Pad		}	},	//숫자외 몇개키만 입력가능(onkeydown)	hasOnlyNumDN : function() {		var code = event.keyCode ? event.keyCode :		        event.which ? event.which : event.charCode;		if (code!=13) {			event.returnValue =				( code >= 48 && code <= 57)        // Number				|| code == 8                              // Backspace				|| code == 9                              // Tab				|| code == 46                            // Delete				|| ( code >= 37 && code <= 40)   // Cursor Key				|| ( code >= 96 && code <= 105) // Key Pad		}	},	OnlyDigit : function() {	//  var code = event.keyCode ? event.keyCode ://	          event.which ? event.which : event.charCode;	//  if (code!=13) {//	    event.returnValue =//	      ( code >= 48 && code <= 57)        // Number//	      || code == 8                              // Backspace//	      || code == 9                              // Tab//	      || code == 46                            // Delete//	      || ( code >= 37 && code <= 40)   // Cursor Key	//  }	  var code = event.keyCode;	  if (code!=13)	  {	    event.returnValue = ( code >= 48 && code <= 57) || (code == 45);	  }	},	OnlyDigitKeyUp : function(obj){	  var str = obj.value.replace(/\D/g,"");	   obj.value = str;	},	onlyNumDN : function() {		var code = event.keyCode ? event.keyCode :		        event.which ? event.which : event.charCode;		if (code!=13) {			event.returnValue =				( code >= 48 && code <= 57)        // Number		}	},	/**	 * 메일형식 유효성 체크	 * @return 올바른 메일형식일 경우 true, 아닐경우 false 리턴	 * @type Boolean	 */	isEmail : function(str) {		return (/^\w+((-|\.)\w+)*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]{2,4}$/.test(str));	},	/**	 * 아이디생성 규칙(영문, 숫자) 체크	 * @param str	 * @returns {Boolean}	 */	idCheck : function(str){	   var id = str;	   var num = id.search(/[0-9]/g);	   var eng = id.search(/[a-z]/ig);	   //var spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩";:₩/?]/gi);	   if(id.length < 6 || id.length > 20){	     //ComUtil.alert("아이디는 영문, 숫자 조합으로 6~10자리 입니다.", "", "", str);		   alert("아이디는 영문, 숫자 조합으로 6~20자리 입니다.", "", "", str);	     return false;	   }	   if(num < 0 || eng < 0 ){	     //ComUtil.alert("아이디는 영문,숫자를 혼합하여 입력해주세요.", "", "", str);		   alert("아이디는 영문,숫자를 혼합하여 입력해주세요.", "", "", str);	     return false;	   }	   return true;	 },	/**	 * 비밀번호 규칙(영문, 숫자) 체크	 * @param str	 * @returns {Boolean}	 */	pwdCheck : function(str){	   var pw = str;	   var num = pw.search(/[0-9]/g);	   var eng = pw.search(/[a-z]/ig);	   //var spe = pw.search(/[`~!@@#$%^&*|₩₩₩'₩";:₩/?]/gi);	   if(pw.length < 8 || pw.length > 20){	     //ComUtil.alert("8자리 ~ 20자리 이내로 입력해주세요.", "", "", str);		   alert("8자리 ~ 20자리 이내로 입력해주세요.", "", "", str);	     return false;	   }	   if(pw.search(/₩s/) != -1){		 //ComUtil.alert("비밀번호는 공백업이 입력해주세요.", "", "", str);		   alert("비밀번호는 공백업이 입력해주세요.", "", "", str);	     return false;	   }	   if(num < 0 || eng < 0 ){	     //ComUtil.alert("영문,숫자를 혼합하여 입력해주세요.", "", "", str);		   alert("영문,숫자를 혼합하여 입력해주세요.", "", "", str);	     return false;	   }	   return true;	 },	 /*	  * 조회 기간 체크	  * - st : 시작일자 (From)	  * - ed : 종료일자 (To)	  * - opt : 1 : 종료일이 오늘보다 큰지 를 체크한다.	  *         0 : 종료일이 오늘보다 큰지 를 체크 하지 않는다.	  */	 fSchDateYear : function(st, ed, opt)	 {	     if (opt == 1 && !isPastTime(ed))	     {	       //ComUtil.alert("조회기간이 오늘 이후로 선택될 수 없습니다.", "", "", st);	    	 alert("조회기간이 오늘 이후로 선택될 수 없습니다.", "", "", st);	       return false;	     }	     if (eval(st) > eval(ed))	     {	       //ComUtil.alert("조회 시작일자가 종료일자 보다 크게 설정되었습니다.", "", "", st);	    	 alert("조회 시작일자가 종료일자 보다 크게 설정되었습니다.", "", "", st);	       return false;	     }	     if (getDayInterval(st, ed) > 365)	     {	       //ComUtil.alert("최대 조회기간은 1년이상을 초과할 수 없습니다.", "", "", ed);	    	 alert("최대 조회기간은 1년이상을 초과할 수 없습니다.", "", "", ed);	       return false;	     }	     return true;	 },	//mili second를 가지고 현재 날짜를 구한 다음 화면에 뿌려준다.	writeDateFromMSec : function(milisecond, type)	{		var today = new Date(milisecond);		var year  = today.getFullYear();		var month = today.getMonth()+1;		var day   = today.getDate();		if(month < 10)	month="0"+month;		if(day < 10)	day="0"+day ;		var yyyymmdd = "";		if(type == "yyyymmdd")        yyyymmdd = year  + ""  + month + ""  + day;		else if(type == "yyyy-mm-dd") yyyymmdd = year  + "-" + month + "-" + day;		else if(type == "yyyy/mm/dd") yyyymmdd = year  + "/" + month + "/" + day;		else if(type == "yyyymm")     yyyymmdd = year  + ""  + month;		else if(type == "mmdd")       yyyymmdd = month + ""  + day;		document.write(yyyymmdd);	},	/*------------------------------------------------- 	Spec      : 원하는 형식의 포멧으로 변환한다 	Parameter : str   -> Source Str 	Parameter : delim -> 삽입될 문자	Parameter : type  -> 원하는 포맷 형식(ex. "3-2-2")	Example   : str = jsGetFormat("20030101","/","4-2-2");  => 2003/01/01	---------------------------------------------------*/	jsGetFormat : function(str, delim, type) {		if(str == null || delim == null || type == null)	return '';		var aType = type.split("-");		var retStr = "";		var firstLen = 0;		var lastLen = 0;		for(i3=0; i3<aType.length; i3++) {			if(i3 == 0) {				firstLen	= 0;				lastLen		= parseInt(aType[0]);			} else {				firstLen	= lastLen;				lastLen		= firstLen + parseInt(aType[i3]);			}			if(i3 == aType.length-1)				retStr = retStr + str.substring(firstLen, lastLen);			else				retStr = retStr + str.substring(firstLen, lastLen) + delim;		}		return retStr;	},	jsGetFormat : function(str){		var year = str.substring(0, 4);		var month = str.substring(5, 7);		var day = str.substring(8, 10);		str = year+month+day;		return str;	},	 /**	  * 쿠키에 값 저장	  * @param cookieName	  * @param value	  *	  */	 setCookie : function(cookieName, value) {		 var exdate = new Date();		 exdate.setDate(exdate.getDate() + 365);		 var cookieValue = escape(value) + ((365==null) ? "" : "; expires=" + exdate.toGMTString());		 document.cookie = cookieName + "=" + cookieValue;	 },	 /**	  * 쿠키에 값 조회	  * @param cookieName	  *	  */	 getCookie : function(cookieName) {		 cookieName = cookieName + '=';		 var cookieData = document.cookie;		 var start = cookieData.indexOf(cookieName);		 var cookieValue = '';		 if(start != -1){			 start += cookieName.length;			 var end = cookieData.indexOf(';', start);			 if(end == -1)end = cookieData.length;			 cookieValue = cookieData.substring(start, end);		 }		 return unescape(cookieValue);	 },	 /**	  * 쿠키에 값 삭제	  * @param cookieName	  *	  */	 delCookie : function(cookieName) {		 var expireDate = new Date();		 expireDate.setDate(expireDate.getDate() - 1);		 document.cookie = cookieName + "= " + "; expires=" + expireDate.toGMTString();	 },	 /**	   * 문자열을 Byte로 리턴	   * @param str 문자열	   * @return String	   */	ByteCal:function(str) {		 if (ComUtil.IsNull(str)) {			 return 0;		 }  	  	 var onechar;		 var cnt = 0;		 for(var ii=0; ii<str.length; ++ii) {			 onechar = escape(str.charAt(ii));             if (onechar.length > 4) {                 cnt += 2;             } else {				 cnt++;			 }		 }         return cnt;    },    /**	  * 로컬 스토리지에 값 저장	  * @param key	  * @param str	  */	 setStorage : function(key, str) {		 if (window.localStorage) {			 window.localStorage.setItem(key, str);		 }	 },	 /**	  *  로컬 스토리지에 값 조회	  * @param key	  *	  */	 getStorage : function(key) {         if (window.localStorage) {			 return window.localStorage.getItem(key);		 } else {			 return "";		 }	 },	 /**	  *  로컬 스토리지에 값 삭제	  * @param key	  *	  */	 delStorage : function(key) {         if (window.localStorage) {			 window.localStorage.removeItem(key);		 }	 },     /**      * 숫자 이외의 문자를 제거하여 반환.      *      * @param {String}      * @param {HTMLElemtnt}      * 			  obj 있을시 필드에 값넣어줌      */     toNumber : function(numStr, obj) {         if (!numStr)             return '';         numStr = numStr + '';         var m = numStr.substring(0, 1) == '-';         var ret = numStr.replace(/[^\d]/g, '');         if( obj && '' != obj){         	obj.val(m ? ('-' + ret) : ret);         }else{         	return m ? ('-' + ret) : ret;         }     },     /**      *      * 입력 변수에 3 자리마다 콤마(,)를 붙여 반환한다.      *      * @param numString      * @param {HTMLElemtnt}      * 			  obj 있을시 필드에 값넣어줌      */     formatCommas : function(numString, obj) {    	 if (ComUtil.IsNullOrEmpty(numString))             return '';         numString = numString + '';         var re = /,|\s+/g;         var retNumString = numString.replace(re, '');         re = /(-?\d+)(\d{3})/;         while (re.test(retNumString))             retNumString = retNumString.replace(re, "$1,$2");         if( obj && '' != obj) obj.val(retNumString);         else return retNumString;     },     formatCommas2 : function(form1)     {     	var els = document.getElementsByTagName('input');     	for (var i=0;i<els.length;i++) {     		if (els[i].type == "text")     		{     			if(els[i].attributes["bttype"] && els[i].attributes["bttype"].value == "amt")     			{     				els[i].value = ComUtil.formatCommas(els[i].value);     			}     		}     		try{     		}     		catch(e){}     	}     },     //소수에 콤마추가     formatCommaStrforFloat : function(str) {     	var rtn = '';     	var SU_COMMA = ',';     	var pointNum = '';     	if(str =='' || str ==null) return 0;     	//alert(str);     	str = str+"";     	var minusStr = "";     	if(str.substring(0,1) == "-") {     		str  =  str.substring(1, str.length);     		minusStr  = "-";     	}     	eleVal = ComUtil.stripCommas(str+"");     	if(eleVal.indexOf(".") > 0) {     		//alert("eleVal["+eleVal+"] eleValBef["+eleVal.substring(0,eleVal.indexOf("."))+"] eleValAft["+eleVal.substring(eleVal.indexOf("."))+"]");     		pointNum = eleVal.substring(eleVal.indexOf("."));     		eleVal = eleVal.substring(0,eleVal.indexOf("."));     	}     	n = parseInt(eleVal.length);     	cnt = parseInt(n / 3);     	mod = parseInt(n % 3);     	if (mod>0) {     		rtn = eleVal.substring(0,mod);     		if (cnt > 0) rtn = rtn + SU_COMMA;     	}     	for (i = 0; i < cnt ; i++) {     		idx = i*3 + mod;     		if (idx == 0) {     			rtn = eleVal.substring(idx,idx + 3);     			if (cnt > 1) rtn = rtn + SU_COMMA;     		} else {     			rtn = rtn + eleVal.substring(idx,idx + 3);     			if (idx < n - 3) rtn = rtn + SU_COMMA;     		}     	}     	//alert("rtn["+rtn+"] pointNum["+pointNum+"]");     	rtn  = minusStr + rtn + pointNum;     	return rtn;     },     /**      * Sungjun Park, 2018.12.14      *      * 전화번호에 하이픈을 넣는다.      *      * @param {String}      *            numString 전화번호에 하이픈을 넣는다.      */     setTelNum : function(numString, obj) {    	 if( obj && '' != obj) obj.val(numString.replace(/(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)([0-9]{4})/,"$1-$2-$3"));         else return numString.replace(/(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)([0-9]{4})/,"$1-$2-$3");     },     /**      *      * Form 을 생성하여 리턴합니다.      *      * @param {Object}      *            form 폼 id      * @param {Object}      *            dest 폼 id      */     createForm : function(id, dest) {         if (!id){        	var d = new Date();        	var msec = d.getMilliseconds();         	// id 를 넣지 않을경우 form 이 계속 생성되는것 주의!         	id = '_newForm' + msec;         }         $('#' + id).remove(); // 이미 존재하면 삭제.         $(document.body).append("<form method='post' id='" + id + "' name='" + id + "'></form>");         if ( dest ){         	var form = $('#' + id);     		$.each($("#"+dest).find(":input"), function(idx){         		var name = $(this).attr("name");         		var type = $(this).attr('type');     			var value = $(this).val();     			if ( type != 'radio' && type != 'checkbox'){     				appendHidden(form, name, value, true);     			} else {     				if ( $(this).attr('type') == 'radio' ){     					$(this).is(":checked") == true ? appendHidden(form, name, value) : "";     				} else if ( $(this).attr('type') == 'checkbox' ){     					if ( $(this).is(":checked") == true){     						appendHidden(form, name, value);     					}     				} else {     					appendHidden(form, name, value, true);     				}     			}         	});         }         return document.getElementById(id);     },     /**      *      * 히든폼을 생성하여 지정한 Form 에 추가합니다.      *      * @param {Object}      *            form 폼 object Or id      * @param {Object}      *            name 필드 name      * @param {Object}      *            value 값      * @param {boolean}      *            isArray 배열 허용여부      * @param {String}      *            type input type (text, hidden) default : hidden      */     appendHidden : function(form, name, value, isArray, type) {         if (typeof form != 'object' && form.indexOf('#') == -1)             form = '#' + form;         if (isArray == undefined || isArray == false) {             if ($(form).find('[name=' + name + ']').val()) {                 $(form).find('[name=' + name + ']').val(value);                 return $(form).find('[name=' + name + ']');             }             $(form).find('[name=' + name + ']').remove();         }         if (type == undefined)             type = 'hidden';         var input = '<input type="' + type +'" name="' + name + '" value="' + value + '"/>';         $(form).append(input);         return $(input);     },     /**      *      * Form 의 input 값을 초기화 한다.      *      * @param form      */     clearFormInput : function(form) {         $(form).find(':input').each(function() {             if (this.type == 'select-one')                 this.options[0].selected = true;             else if (this.type == 'checkbox' || this.type == 'radio')                 $(this).attr('checked', false);             else                 $(this).val('');         });     },     /**      * json object -> array      *      * @param object      * @return      */     JSONtoArray : function(object) {         var results = new Array();         for ( var property in object) {             var value = object[property];             if (value)                 results.push(property.toString() + ':' + value);         }         return results;     },     /**      * array 에서 name 에 해당하는값을 가져온다.      *      * @param array      *            ({name=value,name=value...} 형식의 1차원 배열.)      * @param dilimiter      *            구분자      * @return      */     ArrayToJSON : function(array, dilimiter) {         if (dilimiter == undefined)             dilimiter = '=';         var sub = new Object(); // 객체 값 입력.         for ( var inx in array) {         	if(typeof(array[inx]) != "string") continue;             var data = array[inx].split(dilimiter);             if (data.length > 1) {                 sub[$.trim(data[0])] = $.trim(data[1]);             }         }         return sub;     },     StringToJSON : function(data, dilimiter, fieldDelimeter) {         if (dilimiter == undefined)             dilimiter = '=';         var sub = new Object(); // 객체 값 입력.         var array = data.split(fieldDelimeter);         for ( var inx in array ){         	if(typeof(array[inx]) != "string") continue;         	var data = array[inx].split(dilimiter);         	 if (data.length > 1) {         		 sub[$.trim(data[0])] = $.trim(data[1]);         	 }         }         return sub;     },     /**      *      * Time 스트링을 자바스크립트 Date 객체로 변환      * parameter time: Time 형식의 String      */     toDateFormatStr : function (strTime, dilimiter) { //parseTime(time)     		if(strTime.length == 8){     			var year  = strTime.substring(0,4);         		var month = strTime.substring(4,6);         		var day   = strTime.substring(6,8);         		return ("" + year + dilimiter + month + dilimiter + day)     		}else{     			return strTime;     		}     },     /**      * 오늘의 날짜를 YYYYMMDD 순으로 가져온다      * @param {dilimiter}      *            구분자      */     getToday : function(dilimiter){    	 var today = new Date();         var dd = today.getDate();         var mm = today.getMonth()+1; //January is 0!         var yyyy = today.getFullYear();         if(!dilimiter || undefined == dilimiter || "undefined" == dilimiter) dilimiter = "";         if(dd<10) {             dd='0'+dd         }         if(mm<10) {             mm='0'+mm         }         return String(yyyy)+dilimiter+String(mm)+dilimiter+String(dd);     },     /**      *      * 오늘의 날짜기준으로 YYYYMMDD 앞뒤 년월일 가져온다      * ex)      * 오늘이 2011년 3월 9일이라면      * alert ( getAgoDate(0,0,0) );   ==> 20110309      * alert( getAgoDate(0,0,1) );    ==> 20110310      * alert( getAgoDate(-1,0,-4) );    ==> 20100305      * @param {yyyy}      * @param {mm}      * @param {dd}      *            구분자      */     getAgoDate : function(yyyy, mm, dd){		var today = new Date();		var year = today.getFullYear();		var month = today.getMonth();		var day = today.getDate();		var resultDate = new Date(yyyy+year, month+mm, day+dd);		year = resultDate.getFullYear();		month = resultDate.getMonth() + 1;		day = resultDate.getDate();		if (month < 10)		    month = "0" + month;		if (day < 10)		    day = "0" + day;		return year + "" + month + "" + day;	 },     /**      *      * 글자수에 맞추어 앞에 0을 추가      * 예) 세자릿수에 값이 1인 경우 001, 12인 경우 012      *      * @param {integer}      *            숫자      * @param {integer}      *            자릿수      */     numformat : function(intNum, intLen){         var strNum = intNum + "";         var strTemp = "";         for(var i = 0; i < (eval(intLen) - strNum.length); i++){             strTemp = "0" + strTemp;         }         strTemp = strTemp + strNum;         return strTemp;     },     /**      * Date형식의 날짜를 YYYY-MM-DD형식으로 반환      *      * @param {Object}      *            날짜      */     getdate : function(datArg){         var datD = datArg;         var strTemp = "";         strTemp = strTemp + datD.getFullYear() + "-";         strTemp = strTemp + ComUtil.numformat((datD.getMonth() + 1),2) + "-";         strTemp = strTemp + ComUtil.numformat(datD.getDate(),2);         return strTemp;     },     /**      * YYYYMMDD 날짜에 dash를 부여한다      * @param {String}      *            YYYYMMDD형식 날짜      */     putDash : function(date){         if(date.length != 8)             return date;         var year = date.substring(0,4);         var mon = date.substring(4,6);         var day = date.substring(6,8);         return year + "-" + mon + "-" + day;     },    /**     * 문자열치환.     * Sungjun Park, 2018.12.26     *     * @param {String}     *            numString 치환할 값     */    coReplaceText : function(numString) {    	numString = this.replaceAll(numString, ')', '&#41;');    	numString = this.replaceAll(numString, '(', '&#40');    	numString = this.replaceAll(numString, ';', '&#59;');    	numString = this.replaceAll(numString, '<', '&lt;');    	numString = this.replaceAll(numString, '>', '&gt;');    	numString = this.replaceAll(numString, '\"', '&qout;');    	numString = this.replaceAll(numString, '\'', '&#039;');    	return numString;    },    /**     * 문자열 역치환.     * Sungjun Park, 2018.12.26     *     * @param {String}     *            numString 치환할 값     */    replaceXSSValue : function(str) {    	if($.trim(str) == ""){    		return "";    	}    	str = this.replaceAll(str, '&#41;', ')' );//XSS7    	str = this.replaceAll(str, '&#40;', '(' );//XSS6    	str = this.replaceAll(str, '&gt;', '>' );//XSS5    	str = this.replaceAll(str, '&lt;', '<' );//XSS4    	str = this.replaceAll(str, '&#039;', '\'' );//XSS3    	str = this.replaceAll(str, '&quot;', '"' );//XSS2    	str = this.replaceAll(str, '&amp;', '&');//XSS1    	return str;    },    /**	 * number padding	 * @param str	 * @param size	 * @return	 */	npad: function(str, size) {		return ComUtil.lpad(String(str), size, "0");	},	/**	 * left padding	 * @param str	 * @param size	 * @param padc	 * @return	 */	lpad: function(str, size, padc)	{		return ComUtil.padLR(str, size, padc, "L");	},	/**	 * right padding	 * @param str	 * @param size	 * @param padc	 * @return	 */	rpad: function(str, size, padc) {		return ComUtil.padLR(str, size, padc, "R");	},	/**	 * 문자열 패딩 공통	 * @param str	 * @param size	 * @param padc	 * @param LR	 * @return	 */	padLR: function(str, size, padc, LR)	{		if ( ! padc ) padc = " ";		if ( size < str.length ) return str;		var padcs = "";		for ( var psize = size - str.length; psize > 0; psize-- )			padcs += padc;		return LR == "L" ? padcs + str : str + padcs;	},    /**	 * ymd 에 년, 월, 주, 일 단위로 증가 또는 감소	 * @param ymd	 * @param gbn	 * @param inc	 * @return	 */	addYmd: function(ymd, gbn, inc)	{		ymd = ''.concat(ymd).replace(/\D/g,'');		var dt = new Date(Number(ymd.substr(0, 4)), Number(ymd.substr(4, 2))-1, Number(ymd.substr(6, 2)));		switch ( gbn )		{		    case "Y": dt.setFullYear(dt.getFullYear() + inc); break;		    case "M": dt.setMonth(dt.getMonth() + inc); break;		    case "W": dt.setDate(dt.getDate() + inc*7); break;		    case "D": dt.setDate(dt.getDate() + inc); break;		    // last day of month		    case "LOM":		    {		    	dt.setDate(1);		    	dt.setMonth(dt.getMonth() + 1);		    	dt.setDate(dt.getDate() - 1);		    }		    break;		}		var result_ymd = ComUtil.npad(String(dt.getFullYear()), 4) + ComUtil.npad(String(dt.getMonth() + 1), 2) + ComUtil.npad(dt.getDate(), 2);		if ( 'Y'.match(gbn) || 'M'.match(gbn) )		{			var dd = ymd.substr(6, 2);			var result_dd = result_ymd.substr(6, 2);			if ( result_dd != dd )			{				result_ymd = ComUtil.addYmd(ComUtil.addYmd(result_ymd, 'M', -1), 'LOM');			}		}		return new Date(Number(result_ymd.substr(0, 4)), Number(result_ymd.substr(4, 2))-1, Number(result_ymd.substr(6, 2)));	},	/*****************************************************	 * GET(URL)방식, window.open 을 이용한 링크.	 * ComUtil.goLink("/app/PointUseInq.do", queryString);									// 현재 페이지에서 이동	 * ComUtil.goLink("/app/PointUseInq.do", "aa=bb", "testTarget", "width=200");	// 팝업창으로 이동	 * @param url      URL	 * @param data     파라미터("&"연결) [optional]	 * @param tar      target [optional]	 * @param attr     윈도우 속성 [optional]	 * @return	 ****************************************************/	goLink:function(url, data, tar, attr) {		tar = ComUtil.Nvl2(tar, "_self");		attr = ComUtil.Nvl(attr, "");		var uurl;		if (!ComUtil.IsNullOrEmpty(data)) {			if (url.indexOf("?") > -1) {				uurl = url + '&' + data;			} else {				uurl = url + '?' + data;			}		} else {			uurl = url;		}		window.open(uurl, tar, attr);	},	goBack: function() {		if($(opener).length > 0) {			window.close();		} else {			window.history.back();		}	},	goPage: function(url) {		if(!ComUtil.IsNullOrEmpty(url)) {			window.location.href = url;			return;			var form = $('<form></form>');			form.attr("method", 'post');	// default method is post			var action = url.substr(0, url.indexOf("?"));		    var params = url.substr(url.indexOf("?") + 1);		    var sval = "";			form.attr("action", action);	// default method is post		    params = params.split("&");		    for (var i = 0; i < params.length; i++) {		        temp = params[i].split("=");				form.append($("<input name='"+temp[0]+"' type=hidden  value='"+temp[1]+"'/>"));		    }			$('body').append(form);			form.submit();		}	},	goPagePost: function(url) {		if(!ComUtil.IsNullOrEmpty(url)) {			var form = $('<form></form>');			form.attr("method", 'post');	// default method is post			var action = url.substr(0, url.indexOf("?"));		    var params = url.substr(url.indexOf("?") + 1);		    var sval = "";			form.attr("action", action);	// default method is post		    params = params.split("&");		    for (var i = 0; i < params.length; i++) {		        temp = params[i].split("=");				form.append($("<input name='"+temp[0]+"' type=hidden  value='"+temp[1]+"'/>"));		    }			$('body').append(form);			form.submit();		}	},	goMorePage: function(type) {		if(!ComUtil.IsNullOrEmpty(type)) {			switch (type)			{				case "S001": document.location.href = "/mobile/event/type1?classCode=2077"; break;			    case "S002": document.location.href = "/mobile/event/type2?classCode=1720"; break;			    case "S003": document.location.href = "/mobile/event/type2?classCode=2073"; break;			    case "S004": document.location.href = "/mobile/best/list"; break;			    case "S005": break;			    case "S006": break;			}		}	},	goMain: function(spmDvCd) {		if(!ComUtil.IsNullOrEmpty(spmDvCd)) {		    // form create//			var form = $('<form></form>');//			form.attr("method", "post");	// default method is post//			form.attr("action", "/mall/main");	// default method is post//			form.append($("<input name='spmDvCd' id='spmDvCd' type=hidden  value='"+spmDvCd+"'/>"));////			$('body').append(form);//			form.submit();			document.location.href = "/mobile/mall/main?spmDvCd="+spmDvCd;		}  else {			document.location.href = "/mobile/mall/main";		}	},	getMakePageParam: function(url, pageNoVal) {		if(!ComUtil.IsNullOrEmpty(url)) {			var action = url.substr(0, url.indexOf("?"));			var params = url.substr(url.indexOf("?") + 1);			var strUrl = "";			var bPageNo = false;			if(action != "") {				strUrl = action + "?" ;				params = params.split("&");				for (var i = 0; i < params.length; i++) {					if( i> 0) {						strUrl = strUrl + "&";					}					temp = params[i].split("=");					if(temp[0] == "pageNo") {						strUrl = strUrl + temp[0] + "=" + pageNoVal;						bPageNo = true;					} else {						strUrl = strUrl + temp[0] + "=" + temp[1];					}				}				if(!bPageNo) {					strUrl = strUrl + "&pageNo=" + pageNoVal;				}			} else {				strUrl = url +"?pageNo=" + pageNoVal;			}			return strUrl;		} else {			return "";		}	},	bindKeyUpNumber: function(pObj, callback) {		if($(pObj).length > 1) {			$.each(pObj, function(index, obj) {				$(obj).bind("keyup", function() {					var val = ComUtil.toNumber($(this).val());					$(this).val(val);					if (ComUtil.GetType(callback) === "function") {						callback.call(this);					}				});			});		} else {			$(pObj).bind("keyup", function() {				var val = ComUtil.toNumber($(this).val());				$(this).val(val);				if (ComUtil.GetType(callback) === "function") {					callback.call(this);				}			});		}	},	bindKeyUpNumberCommas: function(pObj, callback) {		if($(pObj).length > 1) {			$.each(pObj, function(index, obj) {				$(obj).bind("keyup", function(evt) {					var val = ComUtil.toNumber($(this).val());					$(this).val(ComUtil.formatCommas(val));					if (ComUtil.GetType(callback) === "function") {						callback.call(this);					}				});			});		} else {			$(pObj).bind("keyup", function(evt) {				var val = ComUtil.toNumber($(this).val());				$(this).val(ComUtil.formatCommas(val));				if (ComUtil.GetType(callback) === "function") {					callback.call(this);				}			});		}	},	isEnter:function (e) {		var code = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;		if (code==13) {			return true;		}		return false;	}}